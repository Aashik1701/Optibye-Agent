version: '3.8'

services:
  # Redis for service discovery and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # MongoDB (if not using external service)
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password123}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3

  # API Gateway (Load Balancer)
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/ems?authSource=admin
      - MONGODB_DATABASE=ems
      - SERVICE_TYPE=gateway
    depends_on:
      - redis
      - mongodb
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Ingestion Service (Scalable)
  data-ingestion:
    build:
      context: .
      dockerfile: Dockerfile.service
    environment:
      - ENVIRONMENT=production
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/ems?authSource=admin
      - MONGODB_DATABASE=ems
      - REDIS_HOST=redis
      - SERVICE_TYPE=data_ingestion
      - SERVICE_PORT=8001
    depends_on:
      - redis
      - mongodb
    restart: unless-stopped
    deploy:
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Analytics Service (Scalable)
  analytics:
    build:
      context: .
      dockerfile: Dockerfile.service
    environment:
      - ENVIRONMENT=production
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/ems?authSource=admin
      - MONGODB_DATABASE=ems
      - REDIS_HOST=redis
      - SERVICE_TYPE=analytics
      - SERVICE_PORT=8002
    depends_on:
      - redis
      - mongodb
    restart: unless-stopped
    deploy:
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Real-time Streaming Service
  realtime-streaming:
    build:
      context: .
      dockerfile: Dockerfile.service
    environment:
      - ENVIRONMENT=production
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/ems?authSource=admin
      - MONGODB_DATABASE=ems
      - REDIS_HOST=redis
      - SERVICE_TYPE=realtime_streaming
      - SERVICE_PORT=8005
    depends_on:
      - redis
      - mongodb
    restart: unless-stopped
    deploy:
      replicas: 1  # WebSocket services typically run single instance per node
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Advanced ML Service
  advanced-ml:
    build:
      context: .
      dockerfile: Dockerfile.service
    environment:
      - ENVIRONMENT=production
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/ems?authSource=admin
      - MONGODB_DATABASE=ems
      - REDIS_HOST=redis
      - SERVICE_TYPE=advanced_ml
      - SERVICE_PORT=8006
    depends_on:
      - redis
      - mongodb
    restart: unless-stopped
    deploy:
      replicas: 1  # ML services are resource intensive
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Security Service
  security:
    build:
      context: .
      dockerfile: Dockerfile.service
    environment:
      - ENVIRONMENT=production
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/ems?authSource=admin
      - MONGODB_DATABASE=ems
      - REDIS_HOST=redis
      - SERVICE_TYPE=security
      - SERVICE_PORT=8007
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-your-32-char-encryption-key!!}
    depends_on:
      - redis
      - mongodb
    restart: unless-stopped
    deploy:
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Service
  monitoring:
    build:
      context: .
      dockerfile: Dockerfile.service
    ports:
      - "8008:8008"  # Expose for Prometheus scraping
    environment:
      - ENVIRONMENT=production
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/ems?authSource=admin
      - MONGODB_DATABASE=ems
      - REDIS_HOST=redis
      - SERVICE_TYPE=monitoring
      - SERVICE_PORT=8008
    depends_on:
      - redis
      - mongodb
    restart: unless-stopped
    deploy:
      replicas: 1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Query Processor Service
  query-processor:
    build:
      context: .
      dockerfile: Dockerfile.service
    environment:
      - ENVIRONMENT=production
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/ems?authSource=admin
      - MONGODB_DATABASE=ems
      - REDIS_HOST=redis
      - SERVICE_TYPE=query_processor
      - SERVICE_PORT=8003
    depends_on:
      - redis
      - mongodb
    restart: unless-stopped
    deploy:
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    restart: unless-stopped
    depends_on:
      - prometheus

  # Analytics Service
  analytics:
    build:
      context: .
      dockerfile: services/analytics/Dockerfile
    ports:
      - "8002-8003:8002"
    environment:
      - ENVIRONMENT=production
      - MONGODB_URI=${MONGODB_URI}
      - MONGODB_DATABASE=${MONGODB_DATABASE}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Query Processor Service
  query-processor:
    build:
      context: .
      dockerfile: services/query_processor/Dockerfile
    ports:
      - "8004-8005:8003"
    environment:
      - ENVIRONMENT=production
      - MONGODB_URI=${MONGODB_URI}
      - MONGODB_DATABASE=${MONGODB_DATABASE}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Notification Service
  notification:
    build:
      context: .
      dockerfile: services/notification/Dockerfile
    ports:
      - "8006:8004"
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # API Gateway
  gateway:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis
      - data-ingestion
      - analytics
      - query-processor
      - notification
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Load Balancer (Nginx)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - gateway
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log aggregation
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./logs:/var/log
      - ./monitoring/promtail.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
